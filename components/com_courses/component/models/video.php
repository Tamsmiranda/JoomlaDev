<?php 

/**
 * Joomla! 1.5 component videos
 * Code generated by : Danny's Joomla! 1.5 MVC Component Code Generator
 * http://www.joomlafreak.be
 * date generated:  
 * @version 0.8
 * @author Danny Buytaert 
 * @package com_videos
 * @license http://opensource.org/licenses/gpl-license.php GNU Public License
 **/

// no direct access
defined( '_JEXEC' ) or die( 'Restricted access' );


	jimport('joomla.application.component.model');
	class CoursesModelVideo extends JModel
	{
	/**
	* Item id
	*
	* @var int
	*/
	var $_id = null;
	/**
	* Item data
	*
	* @var array
	*/
	var $_data = null;
	/**
	* Constructor
	*
	
	*/
	function __construct()
	{
	parent::__construct();
	$array = JRequest::getVar('cid', array(0), '', 'array');
	$edit = JRequest::getVar('edit',true);
	if($edit)
	$this->setId((int)$array[0]);
	}
	/**
	* Method to set the item identifier
	*
	* @access public
	* @param int Item identifier
	*/
	function setId($id)
	{
	// Set item id and wipe data
	$this->_id = $id;
	$this->_data = null;
	}
	/**
	* Method to get a item
	*
	
	*/
	function &getData()
	{
	// Load the item data
	if ($this->_loadData())
	{
	// Initialize some variables
	$user = &JFactory::getUser();
	// Check to see if the category is published
	/*
	if (!$this->_data->cat_pub) {
	JError::raiseError( 404, JText::_("Resource Not Found") );
	return;
	}*/
	
	// Check whether category access level allows access
	/*
	if ($this->_data->cat_access > $user->get('aid', 0)) {
	JError::raiseError( 403, JText::_('ALERTNOTAUTH') );
	return;
	}
	*/
	}
	else $this->_initData();
	return $this->_data;
	}
	
	function listVideos() {
		if ($this->_loadData()){
			$query = 'SELECT * FROM #__videos WHERE course_id = ' . (int) $this->_data->course_id . ' AND published=1 ORDER BY ordering ASC';
			$this->_db->setQuery($query);
			return $this->_db->loadObjectList();
		}
		return array();
	}
	/**
	* Tests if item is checked out
	*
	* @access public
	* @param int A user id
	* @return boolean True if checked out
	
	*/
	function isCheckedOut( $uid=0 )
	{
	if ($this->_loadData())
	{
	if ($uid) {
	return ($this->_data->checked_out && $this->_data->checked_out != $uid);
	} else {
	return $this->_data->checked_out;
	}
	}
	}
	/**
	* Method to checkin/unlock the item
	*
	* @access public
	* @return boolean True on success
	
	*/
	function checkin()
	{
	if ($this->_id)
	{
	$item = & $this->getTable();
	if(! $item->checkin($this->_id)) {
	$this->setError($this->_db->getErrorMsg());
	return false;
	}
	}
	return false;
	}
	/**
	* Method to checkout/lock the item
	*
	* @access public
	* @param int $uid User ID of the user checking the article out
	* @return boolean True on success
	
	*/
	function checkout($uid = null)
	{
	if ($this->_id)
	{
	// Make sure we have a user id to checkout the article with
	if (is_null($uid)) {
	$user =& JFactory::getUser();
	$uid = $user->get('id');
	}
	// Lets get to it and checkout the thing...
	$item = & $this->getTable();
	if(!$item->checkout($uid, $this->_id)) {
	$this->setError($this->_db->getErrorMsg());
	return false;
	}
	return true;
	}
	return false;
	}
	/**
	* Method to store the item
	*
	* @access public
	* @return boolean True on success
	
	*/
	function store($data)
	{
	$row =& $this->getTable();
	$user=& JFactory::getUser();
	// Bind the form fields to the item table
	if (!$row->bind($data)) {
	$this->setError($this->_db->getErrorMsg());
	return false;
	}
	// if new item, order last in appropriate group
	if (!$row->id) {
	//$where = 'catid = ' . (int) $row->catid ;
	$row->ordering = $row->getNextOrder( /*$where */);
	}
		$isNew = true;
		// Are we saving from an item edit?
		if ($row->id) {
			$isNew = false;
			$datenow =& JFactory::getDate();
			$row->modified 	= $datenow->toMySQL();
			$row->modified_by 	= $user->get('id');
		}

		$row->created_by 	= $row->created_by ? $row->created_by : $user->get('id');
		$row->created_by_alias 	= $row->created_by_alias ? $row->created_by_alias : $user->get('name');
		if ($row->created && strlen(trim( $row->created )) <= 10) {
			$row->created 	.= ' 00:00:00';
		}

		$config =& JFactory::getConfig();
		$tzoffset = $config->getValue('config.offset');
		$date =& JFactory::getDate($row->created, $tzoffset);
		$row->created = $date->toMySQL();
		
	// Make sure the item table is valid
	if (!$row->check()) {
	$this->setError($this->_db->getErrorMsg());
	return false;
	}
	// Store the item table to the database
	if (!$row->store()) {
	$this->setError($this->_db->getErrorMsg());
	return false;
	}
	return true;
	}
	/**
	* Method to remove a item
	*
	* @access public
	* @return boolean True on success
	
	*/
	function delete($cid = array())
	{
	$result = false;
	if (count( $cid ))
	{
	JArrayHelper::toInteger($cid);
	$cids = implode( ',', $cid );
	$query = 'DELETE FROM #__videos'
	. ' WHERE id IN ( '.$cids.' )';
	$this->_db->setQuery( $query );
	if(!$this->_db->query()) {
	$this->setError($this->_db->getErrorMsg());
	return false;
	}
	}
	return true;
	}
	/**
	* Method to (un)publish a item
	*
	* @access public
	* @return boolean True on success
	
	*/
	function publish($cid = array(), $publish = 1)
	{
	$user =& JFactory::getUser();
	if (count( $cid ))
	{
	JArrayHelper::toInteger($cid);
	$cids = implode( ',', $cid );
	$query = 'UPDATE #__videos'
	. ' SET published = '.(int) $publish
	. ' WHERE id IN ( '.$cids.' )'
	. ' AND ( checked_out = 0 OR ( checked_out = '.(int) $user->get('id').' ) )'
	;
	$this->_db->setQuery( $query );
	if (!$this->_db->query()) {
	$this->setError($this->_db->getErrorMsg());
	return false;
	}
	}
	return true;
	}
	/**
	* Method to move a item
	*
	* @access public
	* @return boolean True on success
	
	*/
	function move($direction)
	{
	$row =& $this->getTable();
	if (!$row->load($this->_id)) {
	$this->setError($this->_db->getErrorMsg());
	return false;
	}
	if (!$row->move( $direction, ' catid = '.(int) $row->catid.' AND published >= 0 ' )) {
	$this->setError($this->_db->getErrorMsg());
	return false;
	}
	return true;
	}
	/**
	* Method to move a item
	*
	* @access public
	* @return boolean True on success
	
	*/
	function saveorder($cid = array(), $order)
	{
	$row =& $this->getTable();
	$groupings = array();
	// update ordering values
	for( $i=0; $i < count($cid); $i++ )
	{
	$row->load( (int) $cid[$i] );
	// track categories
	$groupings[] = $row->catid;
	if ($row->ordering != $order[$i])
	{
	$row->ordering = $order[$i];
	if (!$row->store()) {
	$this->setError($this->_db->getErrorMsg());
	return false;
	}
	}
	}
	// execute updateOrder for each parent group
	$groupings = array_unique( $groupings );
	foreach ($groupings as $group){
	$row->reorder('catid = '.(int) $group);
	}
	return true;
	}
	/**
	* Method to load content item data
	*
	* @access private
	* @return boolean True on success
	
	*/
	function _loadData()
	{
	// Lets load the item if it doesn't already exist
	if (empty($this->_data))
	{
	/*
	$query = 'SELECT w.*, cc.title AS category,'.
	' cc.published AS cat_pub, cc.access AS cat_access'.
	' FROM #__videos AS w' .
	' LEFT JOIN #__categories AS cc ON cc.id = w.catid' .
	' WHERE w.id = '.(int) $this->_id;*/
	$query = 'SELECT * FROM #__videos WHERE id = ' . (int) $this->_id;
	//$query = "SELECT * FROM #__videos WHERE #__videos.id = " . (int) $this->_id;
	$this->_db->setQuery($query);
	$this->_data = $this->_db->loadObject();
	return (boolean) $this->_data;
	}
	return true;
	}
	/**
	* Method to initialise the item data
	*
	* @access private
	* @return boolean True on success
	
	*/
	function _initData()
	{
	// Lets load the item if it doesn't already exist
	if (empty($this->_data))
	{
	$item = new stdClass();
	$item->id = 0;
	$item->catid = 0;
	$item->sid = 0;
	$item->title = null;
	$item->alias = null;
	$item->max_hit = null;$item->course_id = null;
	$item->created = null;
	$item->created_by = 0;
	$item->created_by_alias = null;
	$item->modified_by = 0;
	$item->checked_out = 0;
	$item->checked_out_time = 0;
	$item->published = 0;
	$item->ordering = 0;
	$item->params = null;
	$item->hits = 0;
	$this->_data = $item;
	return (boolean) $this->_data;
	}
	return true;
	}
	
	function hit()
	{
	   //global $mainframe;
	   if ($this->_id)
	   {
		  $video = & $this->getTable();
		  //$video->hit($this->_id);
		  /*
		   * Atualiza o número de exbições
		   * UPDATE jos_users_videos SET hits = (hits + 1) WHERE jos_users_videos.id = 2
		   * */
		  $user =& JFactory::getUser();
		  $user_id = $user->get('id') ;
		  if ($user_id != 0 ) {
		  $query = 'UPDATE #__users_videos'
			. ' SET hits = ( hits + 1 )'
			. ' WHERE #__users_videos.video_id ='. $this->_id
			. ' AND jos_users_videos.user_id = ' . $user_id;
			$this->_db->setQuery( $query );
			$this->_db->query();
		  }
		  $query = 'UPDATE #__videos'
			. ' SET hits = ( hits + 1 )'
			. ' WHERE #__videos.id ='. $this->_id;
			$this->_db->setQuery( $query );
			$this->_db->query();
		  return true;
	   }
	   return false;
	}
	
	function access() {
		global $mainframe;
		if ($this->_id) {
			$user =& JFactory::getUser();
			$user_id = $user->get('id') ;
			if ($user_id != 0 && $user_id != null) {
				/*$query = 'SELECT '.
					'#__courses.title As course_title, ' .
					  '#__courses.price As course_price, ' .
					  '#__courses.description As course_description, ' .
					  '#__videos.title As video_title, ' .
					  '#__videos.url As video_url, ' .
					  '#__videos.hits As video_hits, ' .
					  '#__courses.hits As course_hits, ' .
					  '#__users_videos.hits As user_hits, ' .
					  '#__videos.max_hit As max_hit, ' .
					  '#__videos.published As video_published, ' .
					  '#__courses.published As course_published, ' .
					  '#__orders.created As order_created, ' .
					  '#__orders.status As order_status ' .
					  'From ' .
					  '#__courses Left Join ' .
					  '#__videos On #__courses.id = #__videos.course_id Left Join ' .
					  '#__users_videos On #__users_videos.video_id = #__videos.id Right Join ' .
					  '#__courses_orders On #__courses_orders.course_id = #__courses.id Right Join ' .
					  '#__orders On #__orders.reference = #__courses_orders.reference ' .
					  'WHERE #__orders.user_id = ' . (int) $user_id . ' AND #__videos.id =' . (int) $this->_id;*/
				$query = 'Select '.
				'#__videos.title As video_title, ' .
				'#__videos.url As video_url, ' .
				'#__videos.hits As video_hits, ' .
				'#__users_videos.hits As user_hits, ' .
				'#__videos.max_hit As max_hit, ' .
				'#__videos.published As video_published, ' .
				'#__orders.created As order_created, ' .
				'#__orders.status As order_status, ' .
				'#__courses_orders.course_id, ' .
				'#__users_videos.user_id ' .
				'From ' .
				'#__videos Left Join ' .
				'#__users_videos On #__users_videos.video_id = ' .
				'#__videos.id Left Join ' .
				'#__courses_orders On #__users_videos.course_id = ' .
				'#__courses_orders.course_id Left Join ' .
				'#__orders On #__orders.reference = ' .
				'#__courses_orders.reference ' .
				'Where ' .
				'#__orders.user_id = ' . (int) $user_id . ' And ' .
				'#__videos.id = ' . (int) $this->_id . ' And ' .
				//'#__courses_orders.course_id = 12 And ' .
				'#__users_videos.user_id = ' . (int) $user_id;
				$this->_db->setQuery($query);
				$rows = $this->_db->loadObjectList();
				//echo "<pre>";print_r($rows);print_r($rows[0]->user_hits);exit;
				/*
				*	Código de erros
				*   Pagseguro
				*   1 : Aguardando pagamento
				*   2 : Em Análise
				*   3 : Paga
				*   4 : Disponível
				*   5 : Em disputa
				*   6 : Devolvida
				*   7 : Cancelada
				*   Master Juris
				*   8 : Área restrita
				*   9 : Número Máximo de visualizações excedido
				*   10: Período de visualizações expirado
				*   11: Video ou categoria indisponível (Despublicado)
				*/
				if (empty($rows)) {
					/* Área restrita */
					return 8;
				} else {
					/* Numero Máximo de Visualizações */
					if ( $rows[0]->user_hits >/*=*/ $rows[0]->max_hit || $rows[0]->user_hits == null  /* NÚMERO MAXIMO DE VISUALIZAÇÕES */ ) {
						return 9;
					}
					/* Período Máximo de Visualizações */
					if ( strtotime("+30 day", strtotime($rows[0]->order_created)) < strtotime(date("Y-m-d H:i:s")) /* NÚMERO MAXIMO DE VISUALIZAÇÕES */ ) {
						return 10;
					}
					/* Não está Publicado */
					if ( $rows[0]->video_published != 1 /*|| $rows[0]->course_published != 1*/) {
						return 11;
					}
					switch ($rows[0]->order_status) {
						/* Aguardando Pagamento */
						case '1':
								return 1;
								break;
						/* Em Análise */
						case '2':
								return 2;
								break;
						/* Paga */
						case '3':
								break;
						/* Disponível */
						case '4':
								break;
						/* Em Disputa */
						case '5':
								return 5;
								break;
						/* Devolvida */
						case '6':
								return 6;
								break;
						/* Cancelada */
						case '7':
								return 7;
								break;
						default :
								return 8;
								break;
					}
					return false;
					
				}
				
			} else {
				//$mainframe->Redirect( 'index.php?option=com_courses','Área Restrita');
				return 8;
			}
		}
		return 8;
	}
	
	}
	